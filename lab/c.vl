enum ast:
  int value int
  float value float
  string value string
  op2 op op, left ast, right ast, type type
  call ref string, args []ast, type type
  def name string, args []arg, lines []ast, type type
  decl name string, args []args, targs []args, type type

enum op:
  add, sub, mul, div, mod, pow
  and, or
  append

struct tv:
  name string
  type type

enum type:
  untyped
  void
  s8, s16, s32, s64
  u8, u16, u32, u64
  f32, f64
  string
  cint, cfloat, cstring
  struct name string, fields []tv
  list generic type
  dict key type, val type
  func args []tv, ret type
  exception name string, extra ast
  try type type

enum define:
  dtype name string, fields []tv
  dfun name string, args []tv, ret type, lines []ast

compile src =
  defines <- parser.inferent.to_defines
  h <- defines.map(x => to_h(x))
  c <- defines.map(x => to_c(x))
  (h ++ c).join("\n")
parser src = ["main" src]
inferent env = env
to_defines env = [env.at(1)]
to_c def = def
to_h def = ""

__compile_to_c src =
  c <- compile(src)
  `#include <stdio.h>

int main() {
` . c . `;
  return 0;
}
`
