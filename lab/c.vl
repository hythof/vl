__compile_to_go src = `#include <stdio.h>

int main() {
` . src . `;
  return 0;
}
`
print x = x


__comment__
enum ast:
  int value int
  string value string
  ref name string
  op2 type string, op string, left ast, right ast
  func type string, name string, args [param], body ast
  call name string, args [ast]
  stmt lines [ast]
  struct params [param]

struct param:
  name string
  type string

struct define:
  name string
  ast ast

flow parser a:
  eof
  miss reason string
  input string
  satisfy f =
    c = input.0 | eof
    f(c) || miss("miss match")
    input := input.slice(1)
    c

compile s =
  defines = dummy_parse(s)
  types = defines.map(x => param(x.name x.ast.type))
  defines.map(define => c_go(types define.ast)).join("\n")

parse s = parser(s).satisfy(c => c == "h")

dummy_parse s = [
  define("main"
    ast.func(
      "string"
      "main"
      []
      ast.op2(
        "string"
        "."
        ast.string("hello go world 1 + 2 = ")
        ast.call("add" [ast.int(1) ast.int(2)])
      )
    )
  )
  define("add"
    ast.func(
      "int"
      "add"
      [param("x" "int") param("y" "int")]
      ast.op2("int" "+" ast.ref("x") ast.ref("y"))
    )
  )
]

c_go types target =
  c_type t =
  | "string" = "string"
  | "int" = "int"
  | "void" = ""
  | ast.func = c_type(t.type)
  | ast.int = "int"
  | ast.string = "string"
  | _ = "BUG1"
  v_type t =
  | ast.int = "int"
  | ast.string = "string"
  | ast.ref = types.filter(x => x.name == t.name).0.type
  | ast.op2 = op2.type
  | ast.func = t.type
  | ast.call = types.filter(x => x.name == t.name).0.type
  | ast.struct = "BUG1: struct"
  | _ = "BUG3"
  c_ast x =
  | ast.int = x.value.string
  | ast.string = `"` . x.value . `"`
  | ast.ref = x.name
  | ast.op2 = c_op(x.op x.left x.right)
  | ast.call = "v." . x.name . "(" . x.args.map(c_ast).join(", ") . ")"
  | ast.func = "func (v *vt)" . x.name . "(" . c_args(x.args) . ") " . c_type(x.type) .  " { return " . c_go((types ++ x.args) x.body) . "}"
  | ast.stmt = x.lines.map(c_ast).join("\n")
  c_args args = args.map(c_arg).join(",")
  c_arg x = x.name . " " . x.type
  c_op op l r =
  | "." _ _ = c_cast(l "string") . "+" . c_cast(r "string")
  | "+" _ _ = c_cast(l "int") . "+" . c_cast(r "int")
  | _ _ _ = op
  c_cast value to = c_cast_to(value v_type(value) to)
  c_cast_to v from to v =
  | _ "int" "string" = "strconv.Itoa(" . c_ast(v) . ")"
  | _ "int" "int" = c_ast(v)
  | _ "string" "string" = c_ast(v)
  | _ _ _ = from
  c_ast(target)

__comment__
parse s = parser(s).satisfy(c => c == "h")
state parser:
  src string
  miss
  satisfy : int (string bool) string
  satisfy n f =
    s = src.slice(0 n)
    if f(s)
      src := src.slice(n)
      return s
    else
      throw miss
    end
