__compile_to_c src =
  c <- compile(src)
  `//
/*
  ` . src . `
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
} v_thread_t;

void v_thread_init(v_thread_t* t) {
}

void* v_thread_malloc(v_thread_t* t, size_t size) {
  // TODO: memory management such as free, pool
  return malloc(size);
}

void v_thread_free(v_thread_t* t, void* v) {
  // TODO: memory management such as free, pool
  free(v);
}


typedef struct {
  size_t len;
  int64_t head[];
} v_list_int64_t;

#define v_out(X) _Generic((X), \
  int64_t: v_out_int64, \
  double: v_out_double, \
  const char*: v_out_char, \
  v_list_int64_t*: v_out_list_int64)(X)
void v_out_int64(int64_t x) { printf("%lld", x); }
void v_out_double(double x) { printf("%g", x); }
void v_out_char(const char* x) { printf("%s", x); }
void v_out_list_int64(v_list_int64_t* l) {
  size_t len = l->len;
  if (len > 0) {
    printf("[");
    for(size_t i = 0; i < len - 1; ++i) {
      printf("%lld ", l->head[i]);
    }
    printf("%lld", l->head[len - 1]);
    // TODO: show body
    printf("]");
  } else {
    printf("[]");
  }
}

const char* v_string_concat(v_thread_t* t, const char* a, const char* b) {
  size_t len1 = strlen(a);
  size_t len2 = strlen(b);
  size_t len = len1 + len2 + 1;
  char* buf = (char*)v_thread_malloc(t, len);
  memcpy(buf, a, len1);
  memcpy(buf + len1, b, len2);
  buf[len - 1] = '\0';
  return buf;
}

` . c . `

int main() {
  v_thread_t t;
  v_thread_init(&t);
  v_out(v_main(&t));
  return 0;
}
`

enum ast:
  i64 value i64
  f64 value f64
  string value string
  op2 op op, left ast, right ast, type type
  func args []tv, body ast, type type
  call name string, argv []ast, type type
  list values []ast, type type

enum op:
  add, sub, mul, div
  glue

struct kv:
  key string
  val ast

struct tv:
  name string
  type type

enum type:
  untyped
  i64
  f64
  string
  list generic type

compile src =
  defines <- parse(src).infer_env
  h <- defines.map(to_h)
  c <- defines.map(to_c)
  type_ret = `const char v_ret[] = "` .
    defines.find(x => x.key == "main").val.v_type .  `";\n`
  h.join(";\n") . ";\n" . type_ret . c.join("\n")

parse src = parser.parse_top(src)

to_h x = x.val.v_type .
  " v_" . x.key . "(v_thread_t* t" . x.val.c_args . ")"
to_c x = to_h(x) . " { " .
  x.val.to_exp([]).has(";").if(
    x.val.to_exp([]).rsub1(";" "; return ")
    "return " . x.val.to_exp([])) . "; }"

infer_env env = env.map(x => kv(x.key x.val.infer_ast(env)))
infer_ast x env =
| ast.i64 _ = x
| ast.f64 _ = x
| ast.string _ = x
| ast.list _ = x
| ast.op2 _ = ast.op2(x.op x.left x.right infer_type(x.left env))
| ast.func _ = ast.func(x.args x.body infer_type(x.body env))
| ast.call _ = ast.call(x.name x.argv infer_type(
  env.find(y => y.key == x.name) env))
infer_type x env =
| ast.i64 _ = type.i64
| ast.f64 _ = type.f64
| ast.string _ = type.string
| ast.list _ = x.type
| ast.op2 _ = x.left.infer_type(env)
| ast.func _ = x.body.infer_type(env)
| ast.call _ = env.find(e => e.key == x.name).val.infer_type(env)
v_type t =
| ast.i64 = "i64"
| ast.f64 = "f64"
| ast.string = "string"
| ast.list = "list"
| ast.op2 = t.type.c_type
| ast.func = t.type.c_type
| ast.call = t.type.c_type
c_type t =
| type.untyped = "void*"
| type.i64 = "int64_t"
| type.f64 = "double"
| type.string = "const char*"
| type.list = "v_list_int64_t*"
c_args x =
| ast.func = x.args.map(y => ", " . y.c_arg).join("")
| _ = ""
c_arg x = x.type.c_type . " " . x.name
to_exp node names =
| ast.i64 _ = node.value.to_string
| ast.f64 _ = node.value.to_string
| ast.string _ = node.value.to_string
| ast.list _ = "v_list_int64_t* l = (v_list_int64_t*)v_thread_malloc(t, sizeof(v_list_int64_t) + sizeof(int64_t) * " .
  node.values.length.to_string . ");" .
  "l->len = " . node.values.length.to_string . "; " .
  node.values.mapi(y => "l->head[" . i.to_string . "] = " . y.to_exp(names)).join(";") . "; l"
| ast.op2 _ = op2_to_c(node.op
  to_exp(node.left names)
  to_exp(node.right names))
| ast.func _ = to_exp(node.body node.args.map(y => y.name))
| ast.call _ = names.has(node.name).if(
  node.name
  "v_" . node.name . "(t" . node.argv.map(y => ", " . y.to_exp(names)).join("") . ")")
op2_to_c op l r =
| op.add _ _ = l . " + " . r
| op.sub _ _ = l . " - " . r
| op.mul _ _ = l . " * " . r
| op.div _ _ = l . " / " . r
| op.glue _ _ = "v_string_concat(t, " . l . ", " . r . ")"


flow inference:
  env any
  funcs []any
  infer =
    main = env.find(x => x.name == "main")
    walk(main)
    funcs
  walk ast =
  | ast.i64 _ = x
  | ast.f64 _ = x
  | ast.string _ = x
  | ast.list _ = x
  | ast.op2 _ = ast.op2(x.op x.left x.right infer_type(x.left env))
  | ast.func _ = fatalError
  | ast.call _ = ast.call(x.name x.argv infer_type(
    env.find(y => y.key == x.name) env))
 

flow parser:
  eof
  miss reason string
  bug_of_c_parser
  input string
  satisfy f =
    c <- input.at(0) | eof
    f(c) || miss
    input := input.slice(1)
    c
  parse_top =
    defs <- parse_def.sepby1(read_br)
    read_spaces
    (input.length == 0) || bug_of_c_parser
    defs
  parse_def =
    name <- read_id
    args <- parse_arg.lex.many
    read_string("=").lex
    body <- parse_exp.lex
    kv(name ast.func(args body type.untyped))
  parse_arg =
    name <- read_id
    read_string(":")
    t <- read_type
    tv(name t.to_type)
  parse_call =
    name <- read_id
    argv <- between(
      read_string("(").lex
      read_string(")").lex
      parse_exp.many) | []
    ast.call(name argv type.untyped)
  parse_exp = parse_op2.lex
  parse_op2 =
    left <- parse_call |
      parse_float |
      parse_int |
      parse_string |
      parse_list
    parse_op2_remaining(left) | left
  parse_op2_remaining left =
    op <- parse_op
    right <- parse_exp
    ast.op2(op left right type.untyped)
  parse_op =
    read_string(" ")
    op_text <- read_one(["." "+" "-" "*" "/" "%" "**" "&&" "||" "++"])
    read_string(" ")
    to_op(op_text)
  parse_float =
    n1 <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1
    read_string(".")
    n2 <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1
    n = (n1 ++ ["."] ++ n2).join("").to_float
    ast.f64(n)
  parse_int =
    n <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1.fmap(s => s.join("").to_int)
    ast.i64(n)
  parse_string =
    s <- between(read_string(`"`) read_string(`"`) read_none([`"`]).many)
    ast.string(s.join(""))
  parse_list =
    xs <- between(
      read_string(`[`).lex
      read_string(`]`).lex
      parse_exp.many)
    ast.list(xs type.list(type.untyped))
  lex f =
    read_one([" " "\t"]).many
    f
  read_br =
    read_one([" " "\t"]).many
    read_one(["\r" "\n"])
  read_spaces = read_one([" " "\t" "\r" "\n"]).many
  read_string s = satisfy(x => x == s)
  read_one set = satisfy(x => set.has(x))
  read_none set = satisfy(x => set.has(x).not)
  read_id =
    x <- read_one(["_" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"])
    xs <- read_one(["_" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"]).many
    x . xs.join("")
  read_type =
    x <- read_one(["[" "_" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"])
    xs <- read_one(["]" "_" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"]).many
    x . xs.join("")

many p = p.many_acc([])
many1 p =
  x <- p
  xs <- p.many
  [x] ++ xs
many_acc p acc = p.fmap(x => p.many_acc(acc ++ [x])) | acc
fmap p f =
  x <- p
  f(x)
between l r c =
  l
  x <- c
  r
  x
sepby p s = sepby1(p s) | []
sepby1 p s =
  x <- p
  xs <- many(combine(s p))
  [x] ++ xs
combine aa bb =
  aa
  bb
to_op op_text =
| "+" = op.add
| "-" = op.sub
| "*" = op.mul
| "/" = op.div
| "." = op.glue
to_type x =
| "i64" = type.i64
| "f64" = type.f64
| "string" = type.string



__comment__
enum type:
  untyped
  void
  s8, s16, s32, s64
  u8, u16, u32, u64
  f32, f64
  string
  cint, cfloat, cstring
  struct name string, fields []tv
  list generic type
  dict key type, val type
  func args []tv, ret type
  exception name string, extra ast
  try type type
enum ast:
  int value int
  float value float
  op2 op op, left ast, right ast, type type
  call ref string, args []ast, type type
  def name string, args []arg, lines []ast, type type
  decl name string, args []args, targs []args, type type
enum op:
  add, sub, mul, div, mod, pow
  and, or
  append
