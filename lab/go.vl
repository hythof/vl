__compile_to_go src =
  go <- compile(src)
  `package main
/*
` . src . `
*/

import "fmt"

` . go . `

func main() {
  fmt.Printf("%v", v_main())
}
`

enum ast:
  i64 value i64
  f64 value f64
  string value string
  op2 op op, left ast, right ast, type type
  func name string, args []tv, body ast, type type
  call name string, argv []ast, type type
  list values []ast, type type

enum op:
  add, sub, mul, div
  glue

struct def:
  name string
  val ast

struct tv:
  name string
  type type

enum type:
  untyped
  i64
  f64
  string
  list generic type

compile src =
  defs = parser.parse_top(src)
  defs = inference.infer(defs [])
  defs.map(to_go).join("\n")

to_go x = "func v_" . x.name . "(" . x.val.c_args . ") " . x.val.v_type . " {" .
  x.val.to_exp([]).has("\n").if(
    x.val.to_exp([]).rsub1("\n" "\n  return ")
    "return " . x.val.to_exp([])) .
  "}"

v_type t =
| ast.i64 = "i64"
| ast.f64 = "f64"
| ast.string = "string"
| ast.list = "list"
| ast.op2 = t.type.go_type
| ast.func = t.type.go_type
| ast.call = t.type.go_type
go_type t =
| type.untyped = "interface{}"
| type.i64 = "int64"
| type.f64 = "float64"
| type.string = "string"
| type.list = "[]interface{}"
| _ = "interface{}"
c_args x =
| ast.func = x.args.map(y => y.c_arg).join(",")
| _ = ""
c_arg x = x.name . " " . x.type.go_type
to_exp node names =
| ast.i64 _ = node.value.to_string
| ast.f64 _ = node.value.to_string
| ast.string _ = node.value.to_string
| ast.list _ = "[]interface{}{" . node.values.mapi(y => y.to_exp(names)).join(", ") . "}"
| ast.op2 _ = op2_to_c(node.op
  to_exp(node.left names)
  to_exp(node.right names))
| ast.func _ = to_exp(node.body node.args.map(y => y.name))
| ast.call _ = names.has(node.name).if(
  node.name
  "v_" . node.name . "(" . node.argv.map(y => y.to_exp(names)).join(", ") . ")")
op2_to_c op l r =
| op.add _ _ = l . " + " . r
| op.sub _ _ = l . " - " . r
| op.mul _ _ = l . " * " . r
| op.div _ _ = l . " / " . r
| op.glue _ _ = l . " + " . r


flow parser:
  eof
  miss reason string
  bug_of_c_parser
  input string
  satisfy f =
    c <- input.at(0) | eof
    f(c) || miss
    input := input.slice(1)
    c
  parse_top =
    defs <- parse_def.sepby1(read_br)
    read_spaces
    (input.length == 0) || bug_of_c_parser
    defs
  parse_def =
    name <- read_id
    args <- parse_arg.lex.many
    read_string("=").lex
    body <- parse_exp.lex
    def(name ast.func(name args body type.untyped))
  parse_arg =
    name <- read_id
    read_string(":")
    t <- read_type
    tv(name t.to_type)
  parse_call =
    name <- read_id
    argv <- between(
      read_string("(").lex
      read_string(")").lex
      parse_exp.many) | []
    ast.call(name argv type.untyped)
  parse_exp = parse_op2.lex
  parse_op2 =
    left <- parse_call |
      parse_float |
      parse_int |
      parse_string |
      parse_list
    parse_op2_remaining(left) | left
  parse_op2_remaining left =
    op <- parse_op
    right <- parse_exp
    ast.op2(op left right type.untyped)
  parse_op =
    read_string(" ")
    op_text <- read_one(["." "+" "-" "*" "/" "%" "**" "&&" "||" "++"])
    read_string(" ")
    to_op(op_text)
  parse_float =
    n1 <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1
    read_string(".")
    n2 <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1
    n = (n1 ++ ["."] ++ n2).join("").to_float
    ast.f64(n)
  parse_int =
    n <- read_one(["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"]).many1.fmap(s => s.join("").to_int)
    ast.i64(n)
  parse_string =
    s <- between(read_string(`"`) read_string(`"`) read_none([`"`]).many)
    ast.string(s.join(""))
  parse_list =
    xs <- between(
      read_string(`[`).lex
      read_string(`]`).lex
      parse_exp.many)
    ast.list(xs type.list(type.untyped))
  lex f =
    read_one([" " "\t"]).many
    f
  read_br =
    read_one([" " "\t"]).many
    read_one(["\r" "\n"])
  read_spaces = read_one([" " "\t" "\r" "\n"]).many
  read_string s = satisfy(x => x == s)
  read_one set = satisfy(x => set.has(x))
  read_none set = satisfy(x => set.has(x).not)
  read_id =
    x <- read_one(["_" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"])
    xs <- read_one(["_" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"]).many
    x . xs.join("")
  read_type =
    x <- read_one(["[" "_" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"])
    xs <- read_one(["]" "_" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"]).many
    x . xs.join("")
many p = p.many_acc([])
many1 p =
  x <- p
  xs <- p.many
  [x] ++ xs
many_acc p acc = p.fmap(x => p.many_acc(acc ++ [x])) | acc
fmap p f =
  x <- p
  f(x)
between l r c =
  l
  x <- c
  r
  x
sepby p s = sepby1(p s) | []
sepby1 p s =
  x <- p
  xs <- many(combine(s p))
  [x] ++ xs
combine aa bb =
  aa
  bb
to_op op_text =
| "+" = op.add
| "-" = op.sub
| "*" = op.mul
| "/" = op.div
| "." = op.glue
to_type x =
| "i64" = type.i64
| "f64" = type.f64
| "string" = type.string

flow inference:
  fail
  defs []define
  infered []define
  infer =
    "main".lookup
    infered
  infer_ast x =
  | ast.f64 = x
  | ast.i64 = x
  | ast.string = x
  | ast.list = x
  | ast.op2 = ast.op2(x.op x.left x.right x.left.infer_type)
  | ast.func = ast.func(x.name x.args x.body x.body.infer_type)
  | ast.call = ast.call(x.name x.argv x.name.lookup.infer_type)
  infer_type x =
  | ast.i64 = type.i64
  | ast.f64 = type.f64
  | ast.string = type.string
  | ast.list = x.type
  | ast.op2 = x.left.infer_type
  | ast.func = x.body.infer_type
  | ast.call = x.name.lookup.infer_ast
  lookup target = try_assign(defs.find(x => x.name == target).val)
  try_assign x =
  | ast.i64 = x
  | ast.f64 = x
  | ast.string = x
  | ast.list = x
  | ast.op2 = x
  | ast.func = assign(x.name x.args x.body x.body.infer_type)
  | ast.call = x
  assign name args body type =
    f = ast.func(name args body type)
    infered := infered ++ [def(name f)]
    f
