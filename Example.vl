scope main
use v compile

main : io i32
main env =
  src = env.stdin.string
  ret = compile(src)
  env.stdout.write(ret)
  0

test : io tester void
test env t =
  t.eq("1" "main = 1")
  t.eq("3" "main = one + inc(1); one = 1; inc x = x + 1")
in:
  run env src =
    ret = compile(src)
    env.shell.stdin(ret.ll).run(["lli"]).stdout.string



scope v
use lib parser compiler

enum ast:
  int i64
  str string
  stmt []ast
  call name string, argv []ast

compile =
  ast = parser.parse_ast
  ret = compiler.compile_ast(ast)

extend parser:
  parse_ast = ...

extend compiler:
  compile_ast ast = ...



scope lib

flow parser:
  let src string
  var pos 0
  parse = ...
  satisfy f =
    c = src(pos)
    f(c) || throw(c f pos)
    pos += 1
    c

flow compiler:
  enum ir:
    i64 int i64
    reg reg string
    ref index i64

  var strings []string
  var structs []string
  var lines []line

  llvm_ir : string # LLVM IR
  llvm_ir = ...
