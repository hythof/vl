main = "hello"
test t = [
    t.eq 1 1
    t.eq 2 2
]

# main.vl
vl => parse eval
src = "main = a + b
a 1
b 2"
main = case parse src
    some v s = case eval v
    | num n  = n . stdout
    | _      = "$v $s" . stderr
    none v s = "$v $s" . stderr

main = case parse src
    some v s : case eval v
    | num n  : n       . stdout
    | _      : "$v $s" . stderr
    none v s : "$v $s" . stderr

# vl/ast.vl
num value
| op2 op left right

# vl/parser.vl
lib.parser => oneOf num parser or
parer s = parser s | top
top = or exp num
exp = do
    l = num
    o = oneOf "+-"
    r = num
    some (op2 o l r)
num = oneOf [0..9]

# vl/eval
eval s = case s
    num v       = v
    op2 "+" l r = l + r
    op2 "-" l r = l - r

# -- library
# satisfy, char, string, oneOf, noneOf
# lookAhead, notFollowedBy
# many, many1
# between, sepBy, sepBy1
# option
parser code pos
some value state | none value state
iif cond f1 f2 = case cond
    some v s = f1 v s
    none v s = f2 v s
and f1 f2 s = iif (f1 s) f2 none
or f1 f2 s = iif (f1 s) some (_ = f2 s)
do = {
    bind m f = iif m f none
    return = some
}

satisfy f n s =
    {pos code} = s
    if pos + n < code.legnth && f code[pos:n]
        some code[pos:n] s{pos += n}
        none "$f" s
_fold f acc s = iif (f s)
    (x = x : _fold f (acc + [x]))
    (_ = some acc)
char x = satisfy (== x) 1
string xs = satisfy (== xs) xs.length
oneOf xs = satisfy xs.has 1
noneOf xs = satisfy (x = (xs.has x).not) 1
lookAhead f = or f (some ())
notFollowedBy f = iif f (_ = none "notFollowedBy") (_ = some ())
many1 f = do
    v = f
    vs = many f
    some [v] + vs
many f = _fold f []
between open close f = do
    open
    v = f
    close
    some v
sepBy1 f sep = do
    v = f
    vs = many do
    | sep
    | f
    some [v] + vs
sepBy f sep = or (sepBy1 f sep) (some [])
option f v = or f (some v)

macro.case v [(cond value) *xs] = if (v == cond) value (case v xs)
macro.case _ _ = runtime_error "case miss match"
macro.do [(x y) f] = x `bind` (v s -> f s)
macro.do [x f] = x `bind` (_ s -> f s)
macro.do [f] = f
