compile s =
  defines = parse(s)
  types = defines.map(x => param(x.name x.ast.type))
  defines.map(define => c_go(types define)).join("\n")

enum ast:
  int:
    value int
  str:
    value str
  ref:
    name str
  op2:
    type str
    op str
    left ast
    right ast
  func:
    type str
    name str
    args [param]
    body ast
  call:
    name str
    args [ast]
  stmt:
    lines [ast]
  struct:
    params [param]

struct param:
  name str
  type str

struct define:
  name str
  ast ast

parse s = [
  define("main"
    ast.func(
      "str"
      "main"
      []
      ast.op2(
        "str"
        "."
        ast.str("hello go world 1 + 2 = ")
        ast.call("add" [ast.int(1) ast.int(2)])
      )
    )
  )
  define("add"
    ast.func(
      "int"
      "add"
      [param("x" "int") param("y" "int")]
      ast.op2("int" "+" ast.ref("x") ast.ref("y"))
    )
  )
]

c_go types define =
  c_type t =
  | "str" = "string"
  | "int" = "int"
  | "void" = ""
  | ast.func = c_type(t.type)
  | ast.int = "int"
  | ast.str = "string"
  | _ = "BUG1"
  v_type t =
  | ast.int = "int"
  | ast.str = "str"
  | ast.ref = "int"
  | ast.op2 = op2.type
  | ast.func = t.type
  | ast.call = types.filter(x => x.name == t.name).0.type
  | ast.struct = "BUG1: struct"
  | _ = "BUG3"
  c_ast x =
  | ast.int = x.value.str
  | ast.str = `"` . x.value . `"`
  | ast.ref = x.name
  | ast.op2 = c_op(x.op x.left x.right)
  | ast.call = "v." . x.name . "(" . x.args.map(c_ast).join(", ") . ")"
  | ast.func = "func (v *vt)" . x.name . "(" . c_args(x.args) . ") " . c_type(x.type) .  " { return " . c_ast(x.body) . "}"
  | ast.stmt = x.lines.map(c_ast).join("\n")
  c_args args = args.map(c_arg).join(",")
  c_arg x = x.name . " " . x.type
  c_op op l r =
  | "." _ _ = c_cast(l "str") . "+" . c_cast(r "str")
  | "+" _ _ = c_cast(l "int") . "+" . c_cast(r "int")
  | _ _ _ = op
  c_cast value to = c_cast_to(value v_type(value) to)
  c_cast_to v from to v =
  | _ "int" "str" = "strconv.Itoa(" . c_ast(v) . ")"
  | _ "int" "int" = c_ast(v)
  | _ "str" "str" = c_ast(v)
  | _ _ _ = from
  c_ast(define.ast)

__comment__
  | ast.ref = "BUG:ref(" . t.name . ")"
