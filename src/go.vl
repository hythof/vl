compile s = to_go(parse(s))

enum ast:
  str:
    value str
  func:
    args [str]
    ret str
    body ast

struct define:
  name str
  lines [ast]


parse s = [define("main" [ast.func([] "str" ast.str("hello go world"))])]
to_go defines = defines.map(from_define).join("\n")
from_define define = define.lines.map(from_line.bind(define.name)).join("\n")
from_line name x =
| _ ast.str = `"` . x.value . `"`
| _ ast.func = "func vl_" . name . "() " . to_type(x.ret) . " { return " . from_line(name x.body) . "}"

to_type t =
| "str" = "string"
| "int" = "int"
| "void" = ""

