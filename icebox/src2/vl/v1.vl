# ---( ast.vl )-----------------------------------------------------
AST = Int | Op | Error
Int Int
Op String AST AST
Error String

# ---( compile.vl )-----------------------------------------------------
compile AST String
compile ast = """
#include <stdlib.h>
int main() {
    return $exp;
}
"""
exp AST String
exp (Op op left right) = v
    l = exp left
    r = exp right
    v = case l r
        (Error e) _ = e
        _ (Error e) = e
        (Int lv) (Int rv) = case op
            "+" = "$lv + $rv"
            "-" = "$lv - $rv"
exp (Int v) = "$v"
exp (Error s) = s

# ---( eval.vl )-----------------------------------------------------
eval AST AST
eval (Op op left right) = v l r
    l = eval left
    r = eval right
    v = case l r
        (Error) _ = l
        _ (Error) = r
        (Int lv) (Int rv)  = case op
            "+" = Int $ lv + rv
            "-" = Int $ lv - rv
eval v = v

# ---( parse.vl )-----------------------------------------------------
parse String AST
parse src = Lang.run src top

Lang = Parser + {
    top = int | op | error
    int = Int $ fill num .int
    real = Real $ fill3 num (char ".") num .real
    op = Op $ operator top top
        operator = one "+-"
    error = Error "parse error $src[pos-10:pos]..."
}

# ---( lib/parser.vl )-----------------------------------------------------
Parser Flow {
    src String
    pos 0

    num = fill1 ('0' <= _1 <= '9')
    char x = read (== x)
    one [x xs] = fill x | one xs
    fill f = f current ? eat + fill f : ""
    fill1 f = f current ? eat + fill f : fail
    current = src[pos]
    eat = src[pos++]
}
