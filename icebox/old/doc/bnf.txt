# -- mini bndefine
root : define*

define : def_import
       | def_export
       | def_type
       | def_var
       | def_func
       | def_proc
       | def_import
       | def_export
       | def_code

def_import : "#import" import+
import : id "as" id
       | id

def_export : "#export" export+
export : id arg* "=" type

def_code : "#package" id

#import 
System.Collections
System.Collections.Generic

#export
wget url params headers = string
wget String [String] [String] = string

def_type : type struct
         | type "[" exp "]"

def_var : id exp

def_func : id arg* "=" exp struct?

def_proc : id arg* "=" proc
proc : "{" line* "}"

line : define
     | call

call : id exp*
     | "return" exp?
     | "if" exp proc ("else" proc)*
     | "if" arg "=" exp proc ("else" proc)*
     | "for" exp proc
     | "for" arg+ "=" exp proc
     | "continue" ([1-9][0-9]*)?
     | "break" ([1-9][0-9]*)?

exp : "(" exp ")"
    | exp ".." exp
    | exp "*" exp
    | exp "/" exp
    | exp "%" exp
    | exp "&" exp
    | exp "|" exp
    | term

term : term "+" term
     | term "-" term
     | comp

comp : comp ">" comp
     | comp "<" comp
     | comp ">=" comp
     | comp "<=" comp
     | comp "==" comp
     | comp "!=" comp
     | factor

factor : float
       | int
       | string
       | array
       | struct
       | type struct
       | lookup
       | exp

id : [a-z][A-Za-z0-9_]*
type : [A-Z][A-Za-z0-9]*
arg : id
    | type id
lookup : id "." lookup
       | id exp*

# value
int : [+-]?[0-9]+
float : [+-]?[0-9]+.[0-9]+
bool : "true" | "false"
string : '"' .+? '"'
array : "[" exp* "]"
struct : "{" define* "}"

# demo
add a b = a + b
mul a b = a * b
main = {
  a = add 1 2
  b = mul 2 3
  print a + a + b
}
sendmail title body = {
    if fh = open "/usr/sbin" {
        fh.write "Subject: $title\n\n" + body
        fh.close
    }
}
kuku line = {
    k = 0
    for i = 9 {
        for j = 9 {
            k += line (i+1) (j+1)
            if k > 9 * 9 {
                break2
            }
        }
    }
}
print = {
    callback i j = {
        print i "," j
        return i * j
    }
    kuku callback
}
