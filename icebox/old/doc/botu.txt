#!vl

!doctype
html
  head
    meta charset=utf-8
    title $title
  body
    h1 $title
    ul
      # memos -> memo
      li $memo.title
    footer
      .copyright &copy; hiroshi.tadokoro

# data
data Kind {
    name String
    tag String
}
data Receipt {
  kind Kind
  cost Integer
  at   DateTime
}

# io
Counter :: Integer -> Integer
Counter.implements Monad {
    return = Counter 0
    step l r = do
        v = Counter s -> s
        return Counter (r v)
}
reciepts io = {
    :begin = do {
        io.open
        io.lock
        _all = Reciept[ io.readlines.split "\t" -> (id kind cost at) ]
    }
    :end = io.close
    _all = [Reciept]
    get id = _all[.id == id]
    put id kind cost = _all : Reciept id kind cost
    recentry = _all[0:10]
    update r kind cost = r! kind=kind cost=cost
}
kinds io = {
    :begin = do {
        io.open
        io.lock
    }
    :loop = io.readlines
    :end = io.close
    add label = io.appendline label
    remove label = io.remove label
}



for (min .. max) &block = _inner min max block {
    _inner current max block = current < max ? for_inner current + 1 max block
}
if bool &true &false = bool ? true.eager : false.eager
while cond &block = cond ? while cond block.eager
do &block while cond = block.eager; while cond block
case value [(cond block):xs] = value == cond ? block : case value xs 
case value default xs = case value xs:(_:default)

case "hubot" {
/^hoobar/ ok
/^hubot/  ng
_         ok
}
case "hubot" ok {
/^hoobar/ ok
/^hubot/  ng
}


# application server
run = request_method.match status403 {
    "POST" post
    "GET" get
}

post = do {
    id = cgi.post.int "id"
    kind = cgi.post.int "kind"
    cost = cgi.post.int "cost"
    
    reciepts (File "reciepts.dat") {
        get id -> r (update r kind cost) (put id kind cost)
    }

    sgi.location "/"
}
get = sgi.ok {
    :headers ["Content-Type: text/html; chraset=utf-8"
    :html "<!doctype><h1>kakeibo<ul>"
    ul = "<ul>" + Receipts {
        .map x => "$x.kind.name $x.cost"
        .join x => "<li>$x"
    }
}

status403 = sgi.response {
    :status 403
    :headres ["Content-Type: text/html; charset=utf-8"]
    :html "Status 403 method not allowed"
}

# main
require "sgi"
 = sgi.run run

