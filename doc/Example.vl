package main
import v

main :: io i32
main env =
  src = env.stdin.string
  ret = v.compile(src)
  env.stdout.write(ret)
  0
test :: io tester
test env t =
  eq("1" "main = 1")
  eq("3" "main = one + inc(1); one = 1; inc x = x + 1")
with:
  eq expect code = t.eq(expect run(code))
  run src =
    ret = compile(src)
    env.shell.stdin(ret.ll).run(["lli"]).stdout.string

package v
import lib(parser compiler)

enum ast:
  int i64
  op2 op string, left ast, right ast

compile src = build(parse(src))
parse src = parse_exp ||| parse_int
with:
  p parser(src)
  parse_int =
    x = p.many1(p.satisfy(range("0" "9").contains))
    ast.int(x.to_int)
  parse_exp =
    l = parse_int
    op = read_op
    r = parse_exp
    ast.op2(op l r)
  read_op = p.satisfy("+-*/".contains)

build node =
  handle(node)
  c.llvm_ir
with:
  c compiler
  handle node =
  | ast.int -> assign_i64(node)
  | ast.op2 -> op2(node.op node.left node.right)
  op2 o left right = o
  | "+" -> assign_add(l r)
  | throw "invalid operator" o "with" left right
  | l = handle(left)
  | r = handle(right)

scope lib
flow parser:
  src string
  pos i64
  satisfy f = () ->
    c = src(pos)
    f(c) | throw c f pos
    pos += 1
    c
  many f = () -> _many_acc(f [])
  many1 f = () -> f() ++ many(f)
  _many_acc f acc = _many_acc(f [f()] ++ acc) ||| acc
flow compiler:
  strings []string
  structs []string
  lines []string
  registers i64
  assign_string s = strings.append(s); r = r_; lines.append(r . " = @.string." . strings.length); r
  assign_struct s = structs.append(s); r = r_; lines.append(r . " = %.struct." . structs.length); r
  assign_i64 n = n.string
  assign_add l r = ...
  _r = "%" . (registers += 1)
  llvm_ir = lines.join("\n")
