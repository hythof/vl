VERSION
1.2.3
- 1 major version, does not backward compatibility
- 2 minor version, add function, does not chnage function interface and remove it
- 3 patch, only change logic, does not add/remove/change function interface

# platform support
[] Windows support
[] Mac support

# support editor
[] Vim               # my editor
[] Atom              # popular editor
[] Visual Studio     # visual studio code

# release
[] Documentation
[] Benchmark
[] Decision coverage

# standard library
[] Encoding JSON      # practice format
[] protocol HTTP/1.0  # minimal implements
[] Template literals  # precompile

# for developer tools
[] Cost calculater   # static profiler
[] Coverage          # static analyzer basis
[] Optimizer         # optimizer basis
[] Lint              # improve team development
[] Formatter         # improve team development
[] Package manager
- Command line design

# CI
[] Download dependency files, compile and linking script
[] Circle CI

# C wrappers
[] Linking openssl
[] Linking oniguruma
[] Linking random
[] Linking base64
[] Linking zlib
[] Linking ICU
[] Linking time

# Core
[] Stream             # fd wrapper basis
[] Console            # for practice
[] Network            # for practice
[] File               # for practice
[] Parallels          # interface
[] Worker             # like a process
[] VM provide async network, async file, console, thread, process

# translator
[] Translate to C
[] Self booting
[] Self interpriter
[] Self parser

# basis
[] Haskell interpreter

# syntax
[x] Primitive
    char     'c'
    string   "text"
    int      1
    float    2.0
    array    [1 2]
    tuple    (1, 2)
    struct   {f1 1, f2 "s"}
    function (a b = a + b)
    assign   year = 2017; add a b = a + b
    call     add(1 add(one two))
    variable do { xs := []; xs.add 10; xs = xs.uniq }
[x] Optimization
    gc
    tail call
    consistant folding
    sized number : int8..64, uint8..64, float32, float64
    manual capacity for array and number
    assign from prepared memory pool
[x] Functional Syntax
    distance p1 p2 =
        x = p2.x - p1.x
        y = p2.y - p1.y
        sqrt x + y
    sd xs =
        avg = xs.sum(+) / xs.size
        xs.sum(x = x ** 2 - avg ** 2).root
[x] Sequence Syntax
    parser.csv = do(
        _ = spaces
        term = or(
            "0123456789".oneOf.many1
            between('"' '"' any1))
        sep1 term (char ',')
[x] Switch Syntax
    fizzbuzz x = (if
            (x / 15 == 0) "FizzBuzz"
            (x / 3 == 0) "Fizz"
            (x / 5 == 0) "Buzz"
            x.to_s)
    fizzbuzz x = (case (x / 3, x / 5)
        (0, 0) "FizzBuzz"
        (0, _) "Fizz"
        (_, 0) "Buzz"
        x.to_s)
[x] Type system design
    id a : a a
    add a.num : a a
[x] Algebric data type
    tree a : leaf a | node (tree a) (tree a)
[] Name space
[] Monad syntax
